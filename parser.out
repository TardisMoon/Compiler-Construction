Grammar:

Rule 0     S' -> program
Rule 1     program -> expr
Rule 2     program -> INT MAIN LPAREN RPAREN LCB stmt_list return_stmt RCB
Rule 3     stmt_list -> flow_stmt
Rule 4     stmt_list -> stmt
Rule 5     stmt_list -> stmt stmt_list
Rule 6     stmt -> LPAREN expr RPAREN
Rule 7     stmt -> empty
Rule 8     stmt -> ID ASSIGN NUM SEMI
Rule 9     stmt -> INT ID SEMI
Rule 10    stmt -> INT ID ASSIGN expr SEMI
Rule 11    empty -> <empty>
Rule 12    flow_stmt -> IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB
Rule 13    flow_stmt -> IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB
Rule 14    return_stmt -> RETURN factor SEMI
Rule 15    expr -> factor
Rule 16    expr -> factor / expr  [precedence=left, level=2]
Rule 17    expr -> factor * expr  [precedence=left, level=2]
Rule 18    expr -> factor - expr  [precedence=left, level=1]
Rule 19    expr -> factor + expr  [precedence=left, level=1]
Rule 20    factor -> ID
Rule 21    factor -> NUM

Unused terminals:

    ELSE
    IMAGINARY
    VOLATILE
    TYPEDEF
    CONST
    GRTEQ
    GOTO
    SWITCH
    ENUM
    STRUCT
    DO
    DOUBLE
    STATIC
    AUTO
    COMPLEX
    DEFAULT
    SIZEOF
    SHORT
    NEGATE
    FLOAT
    REGISTER
    CHAR
    CONTINUE
    FOR
    LONG
    WHILE
    EQREL
    EXTERN
    LOGICOR
    BREAK
    INLINE
    NOTEQ
    LESEQ
    CASE
    UNION
    UNSIGNED
    DECREMNT
    VOID
    BOOL
    LOGICAND
    INCRMNT
    SIGNED

Terminals, with rules where they appear:

*                    : 17
+                    : 19
-                    : 18
/                    : 16
ASSIGN               : 8 10
AUTO                 : 
BOOL                 : 
BREAK                : 
CASE                 : 
CHAR                 : 
COMPLEX              : 
CONST                : 
CONTINUE             : 
DECREMNT             : 
DEFAULT              : 
DO                   : 
DOUBLE               : 
ELSE                 : 
ENUM                 : 
EQREL                : 
EXTERN               : 
FLOAT                : 
FOR                  : 
GOTO                 : 
GRTEQ                : 
GTR                  : 13
ID                   : 8 9 10 12 13 20
IF                   : 12 13
IMAGINARY            : 
INCRMNT              : 
INLINE               : 
INT                  : 2 9 10
LCB                  : 2 12 13
LESEQ                : 
LOGICAND             : 
LOGICOR              : 
LONG                 : 
LPAREN               : 2 6 12 13
LTR                  : 12
MAIN                 : 2
NEGATE               : 
NOTEQ                : 
NUM                  : 8 12 13 21
RCB                  : 2 12 13
REGISTER             : 
RETURN               : 14
RPAREN               : 2 6 12 13
SEMI                 : 8 9 10 14
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRUCT               : 
SWITCH               : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 
VOLATILE             : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear:

empty                : 7
expr                 : 1 6 10 16 17 18 19
factor               : 14 15 16 17 18 19
flow_stmt            : 3
program              : 0
return_stmt          : 2 12 13
stmt                 : 4 5
stmt_list            : 2 5 12 13


state 0

    (0) S' -> . program
    (1) program -> . expr
    (2) program -> . INT MAIN LPAREN RPAREN LCB stmt_list return_stmt RCB
    (15) expr -> . factor
    (16) expr -> . factor / expr
    (17) expr -> . factor * expr
    (18) expr -> . factor - expr
    (19) expr -> . factor + expr
    (20) factor -> . ID
    (21) factor -> . NUM
    INT             shift and go to state 3
    ID              shift and go to state 5
    NUM             shift and go to state 6

    program                        shift and go to state 1
    expr                           shift and go to state 2
    factor                         shift and go to state 4

state 1

    (0) S' -> program .


state 2

    (1) program -> expr .
    $end            reduce using rule 1 (program -> expr .)


state 3

    (2) program -> INT . MAIN LPAREN RPAREN LCB stmt_list return_stmt RCB
    MAIN            shift and go to state 7


state 4

    (15) expr -> factor .
    (16) expr -> factor . / expr
    (17) expr -> factor . * expr
    (18) expr -> factor . - expr
    (19) expr -> factor . + expr
    $end            reduce using rule 15 (expr -> factor .)
    RPAREN          reduce using rule 15 (expr -> factor .)
    SEMI            reduce using rule 15 (expr -> factor .)
    /               shift and go to state 8
    *               shift and go to state 9
    -               shift and go to state 10
    +               shift and go to state 11


state 5

    (20) factor -> ID .
    /               reduce using rule 20 (factor -> ID .)
    *               reduce using rule 20 (factor -> ID .)
    -               reduce using rule 20 (factor -> ID .)
    +               reduce using rule 20 (factor -> ID .)
    $end            reduce using rule 20 (factor -> ID .)
    RPAREN          reduce using rule 20 (factor -> ID .)
    SEMI            reduce using rule 20 (factor -> ID .)


state 6

    (21) factor -> NUM .
    /               reduce using rule 21 (factor -> NUM .)
    *               reduce using rule 21 (factor -> NUM .)
    -               reduce using rule 21 (factor -> NUM .)
    +               reduce using rule 21 (factor -> NUM .)
    $end            reduce using rule 21 (factor -> NUM .)
    RPAREN          reduce using rule 21 (factor -> NUM .)
    SEMI            reduce using rule 21 (factor -> NUM .)


state 7

    (2) program -> INT MAIN . LPAREN RPAREN LCB stmt_list return_stmt RCB
    LPAREN          shift and go to state 12


state 8

    (16) expr -> factor / . expr
    (15) expr -> . factor
    (16) expr -> . factor / expr
    (17) expr -> . factor * expr
    (18) expr -> . factor - expr
    (19) expr -> . factor + expr
    (20) factor -> . ID
    (21) factor -> . NUM
    ID              shift and go to state 5
    NUM             shift and go to state 6

    factor                         shift and go to state 4
    expr                           shift and go to state 13

state 9

    (17) expr -> factor * . expr
    (15) expr -> . factor
    (16) expr -> . factor / expr
    (17) expr -> . factor * expr
    (18) expr -> . factor - expr
    (19) expr -> . factor + expr
    (20) factor -> . ID
    (21) factor -> . NUM
    ID              shift and go to state 5
    NUM             shift and go to state 6

    factor                         shift and go to state 4
    expr                           shift and go to state 14

state 10

    (18) expr -> factor - . expr
    (15) expr -> . factor
    (16) expr -> . factor / expr
    (17) expr -> . factor * expr
    (18) expr -> . factor - expr
    (19) expr -> . factor + expr
    (20) factor -> . ID
    (21) factor -> . NUM
    ID              shift and go to state 5
    NUM             shift and go to state 6

    factor                         shift and go to state 4
    expr                           shift and go to state 15

state 11

    (19) expr -> factor + . expr
    (15) expr -> . factor
    (16) expr -> . factor / expr
    (17) expr -> . factor * expr
    (18) expr -> . factor - expr
    (19) expr -> . factor + expr
    (20) factor -> . ID
    (21) factor -> . NUM
    ID              shift and go to state 5
    NUM             shift and go to state 6

    factor                         shift and go to state 4
    expr                           shift and go to state 16

state 12

    (2) program -> INT MAIN LPAREN . RPAREN LCB stmt_list return_stmt RCB
    RPAREN          shift and go to state 17


state 13

    (16) expr -> factor / expr .
    $end            reduce using rule 16 (expr -> factor / expr .)
    RPAREN          reduce using rule 16 (expr -> factor / expr .)
    SEMI            reduce using rule 16 (expr -> factor / expr .)


state 14

    (17) expr -> factor * expr .
    $end            reduce using rule 17 (expr -> factor * expr .)
    RPAREN          reduce using rule 17 (expr -> factor * expr .)
    SEMI            reduce using rule 17 (expr -> factor * expr .)


state 15

    (18) expr -> factor - expr .
    $end            reduce using rule 18 (expr -> factor - expr .)
    RPAREN          reduce using rule 18 (expr -> factor - expr .)
    SEMI            reduce using rule 18 (expr -> factor - expr .)


state 16

    (19) expr -> factor + expr .
    $end            reduce using rule 19 (expr -> factor + expr .)
    RPAREN          reduce using rule 19 (expr -> factor + expr .)
    SEMI            reduce using rule 19 (expr -> factor + expr .)


state 17

    (2) program -> INT MAIN LPAREN RPAREN . LCB stmt_list return_stmt RCB
    LCB             shift and go to state 18


state 18

    (2) program -> INT MAIN LPAREN RPAREN LCB . stmt_list return_stmt RCB
    (3) stmt_list -> . flow_stmt
    (4) stmt_list -> . stmt
    (5) stmt_list -> . stmt stmt_list
    (12) flow_stmt -> . IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB
    (13) flow_stmt -> . IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB
    (6) stmt -> . LPAREN expr RPAREN
    (7) stmt -> . empty
    (8) stmt -> . ID ASSIGN NUM SEMI
    (9) stmt -> . INT ID SEMI
    (10) stmt -> . INT ID ASSIGN expr SEMI
    (11) empty -> .
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
    IF              shift and go to state 24
    LPAREN          shift and go to state 20
    ID              shift and go to state 25
    INT             shift and go to state 19
    RETURN          reduce using rule 11 (empty -> .)

    stmt_list                      shift and go to state 21
    flow_stmt                      shift and go to state 22
    stmt                           shift and go to state 23
    empty                          shift and go to state 26

state 19

    (9) stmt -> INT . ID SEMI
    (10) stmt -> INT . ID ASSIGN expr SEMI
    ID              shift and go to state 27


state 20

    (6) stmt -> LPAREN . expr RPAREN
    (15) expr -> . factor
    (16) expr -> . factor / expr
    (17) expr -> . factor * expr
    (18) expr -> . factor - expr
    (19) expr -> . factor + expr
    (20) factor -> . ID
    (21) factor -> . NUM
    ID              shift and go to state 5
    NUM             shift and go to state 6

    expr                           shift and go to state 28
    factor                         shift and go to state 4

state 21

    (2) program -> INT MAIN LPAREN RPAREN LCB stmt_list . return_stmt RCB
    (14) return_stmt -> . RETURN factor SEMI
    RETURN          shift and go to state 30

    return_stmt                    shift and go to state 29

state 22

    (3) stmt_list -> flow_stmt .
    RETURN          reduce using rule 3 (stmt_list -> flow_stmt .)


state 23

    (4) stmt_list -> stmt .
    (5) stmt_list -> stmt . stmt_list
    (3) stmt_list -> . flow_stmt
    (4) stmt_list -> . stmt
    (5) stmt_list -> . stmt stmt_list
    (12) flow_stmt -> . IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB
    (13) flow_stmt -> . IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB
    (6) stmt -> . LPAREN expr RPAREN
    (7) stmt -> . empty
    (8) stmt -> . ID ASSIGN NUM SEMI
    (9) stmt -> . INT ID SEMI
    (10) stmt -> . INT ID ASSIGN expr SEMI
    (11) empty -> .
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 4 (stmt_list -> stmt .)
    RETURN          reduce using rule 4 (stmt_list -> stmt .)
    IF              shift and go to state 24
    LPAREN          shift and go to state 20
    ID              shift and go to state 25
    INT             shift and go to state 19

    stmt                           shift and go to state 23
    stmt_list                      shift and go to state 31
    flow_stmt                      shift and go to state 22
    empty                          shift and go to state 26

state 24

    (12) flow_stmt -> IF . LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB
    (13) flow_stmt -> IF . LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB
    LPAREN          shift and go to state 32


state 25

    (8) stmt -> ID . ASSIGN NUM SEMI
    ASSIGN          shift and go to state 33


state 26

    (7) stmt -> empty .
    IF              reduce using rule 7 (stmt -> empty .)
    LPAREN          reduce using rule 7 (stmt -> empty .)
    ID              reduce using rule 7 (stmt -> empty .)
    INT             reduce using rule 7 (stmt -> empty .)
    RETURN          reduce using rule 7 (stmt -> empty .)


state 27

    (9) stmt -> INT ID . SEMI
    (10) stmt -> INT ID . ASSIGN expr SEMI
    SEMI            shift and go to state 34
    ASSIGN          shift and go to state 35


state 28

    (6) stmt -> LPAREN expr . RPAREN
    RPAREN          shift and go to state 36


state 29

    (2) program -> INT MAIN LPAREN RPAREN LCB stmt_list return_stmt . RCB
    RCB             shift and go to state 37


state 30

    (14) return_stmt -> RETURN . factor SEMI
    (20) factor -> . ID
    (21) factor -> . NUM
    ID              shift and go to state 5
    NUM             shift and go to state 6

    factor                         shift and go to state 38

state 31

    (5) stmt_list -> stmt stmt_list .
    RETURN          reduce using rule 5 (stmt_list -> stmt stmt_list .)


state 32

    (12) flow_stmt -> IF LPAREN . ID LTR NUM RPAREN LCB stmt_list return_stmt RCB
    (13) flow_stmt -> IF LPAREN . ID GTR NUM RPAREN LCB stmt_list return_stmt RCB
    ID              shift and go to state 39


state 33

    (8) stmt -> ID ASSIGN . NUM SEMI
    NUM             shift and go to state 40


state 34

    (9) stmt -> INT ID SEMI .
    IF              reduce using rule 9 (stmt -> INT ID SEMI .)
    LPAREN          reduce using rule 9 (stmt -> INT ID SEMI .)
    ID              reduce using rule 9 (stmt -> INT ID SEMI .)
    INT             reduce using rule 9 (stmt -> INT ID SEMI .)
    RETURN          reduce using rule 9 (stmt -> INT ID SEMI .)


state 35

    (10) stmt -> INT ID ASSIGN . expr SEMI
    (15) expr -> . factor
    (16) expr -> . factor / expr
    (17) expr -> . factor * expr
    (18) expr -> . factor - expr
    (19) expr -> . factor + expr
    (20) factor -> . ID
    (21) factor -> . NUM
    ID              shift and go to state 5
    NUM             shift and go to state 6

    expr                           shift and go to state 41
    factor                         shift and go to state 4

state 36

    (6) stmt -> LPAREN expr RPAREN .
    IF              reduce using rule 6 (stmt -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 6 (stmt -> LPAREN expr RPAREN .)
    ID              reduce using rule 6 (stmt -> LPAREN expr RPAREN .)
    INT             reduce using rule 6 (stmt -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 6 (stmt -> LPAREN expr RPAREN .)


state 37

    (2) program -> INT MAIN LPAREN RPAREN LCB stmt_list return_stmt RCB .
    $end            reduce using rule 2 (program -> INT MAIN LPAREN RPAREN LCB stmt_list return_stmt RCB .)


state 38

    (14) return_stmt -> RETURN factor . SEMI
    SEMI            shift and go to state 42


state 39

    (12) flow_stmt -> IF LPAREN ID . LTR NUM RPAREN LCB stmt_list return_stmt RCB
    (13) flow_stmt -> IF LPAREN ID . GTR NUM RPAREN LCB stmt_list return_stmt RCB
    LTR             shift and go to state 43
    GTR             shift and go to state 44


state 40

    (8) stmt -> ID ASSIGN NUM . SEMI
    SEMI            shift and go to state 45


state 41

    (10) stmt -> INT ID ASSIGN expr . SEMI
    SEMI            shift and go to state 46


state 42

    (14) return_stmt -> RETURN factor SEMI .
    RCB             reduce using rule 14 (return_stmt -> RETURN factor SEMI .)


state 43

    (12) flow_stmt -> IF LPAREN ID LTR . NUM RPAREN LCB stmt_list return_stmt RCB
    NUM             shift and go to state 47


state 44

    (13) flow_stmt -> IF LPAREN ID GTR . NUM RPAREN LCB stmt_list return_stmt RCB
    NUM             shift and go to state 48


state 45

    (8) stmt -> ID ASSIGN NUM SEMI .
    IF              reduce using rule 8 (stmt -> ID ASSIGN NUM SEMI .)
    LPAREN          reduce using rule 8 (stmt -> ID ASSIGN NUM SEMI .)
    ID              reduce using rule 8 (stmt -> ID ASSIGN NUM SEMI .)
    INT             reduce using rule 8 (stmt -> ID ASSIGN NUM SEMI .)
    RETURN          reduce using rule 8 (stmt -> ID ASSIGN NUM SEMI .)


state 46

    (10) stmt -> INT ID ASSIGN expr SEMI .
    IF              reduce using rule 10 (stmt -> INT ID ASSIGN expr SEMI .)
    LPAREN          reduce using rule 10 (stmt -> INT ID ASSIGN expr SEMI .)
    ID              reduce using rule 10 (stmt -> INT ID ASSIGN expr SEMI .)
    INT             reduce using rule 10 (stmt -> INT ID ASSIGN expr SEMI .)
    RETURN          reduce using rule 10 (stmt -> INT ID ASSIGN expr SEMI .)


state 47

    (12) flow_stmt -> IF LPAREN ID LTR NUM . RPAREN LCB stmt_list return_stmt RCB
    RPAREN          shift and go to state 49


state 48

    (13) flow_stmt -> IF LPAREN ID GTR NUM . RPAREN LCB stmt_list return_stmt RCB
    RPAREN          shift and go to state 50


state 49

    (12) flow_stmt -> IF LPAREN ID LTR NUM RPAREN . LCB stmt_list return_stmt RCB
    LCB             shift and go to state 51


state 50

    (13) flow_stmt -> IF LPAREN ID GTR NUM RPAREN . LCB stmt_list return_stmt RCB
    LCB             shift and go to state 52


state 51

    (12) flow_stmt -> IF LPAREN ID LTR NUM RPAREN LCB . stmt_list return_stmt RCB
    (3) stmt_list -> . flow_stmt
    (4) stmt_list -> . stmt
    (5) stmt_list -> . stmt stmt_list
    (12) flow_stmt -> . IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB
    (13) flow_stmt -> . IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB
    (6) stmt -> . LPAREN expr RPAREN
    (7) stmt -> . empty
    (8) stmt -> . ID ASSIGN NUM SEMI
    (9) stmt -> . INT ID SEMI
    (10) stmt -> . INT ID ASSIGN expr SEMI
    (11) empty -> .
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
    IF              shift and go to state 24
    LPAREN          shift and go to state 20
    ID              shift and go to state 25
    INT             shift and go to state 19
    RETURN          reduce using rule 11 (empty -> .)

    stmt_list                      shift and go to state 53
    flow_stmt                      shift and go to state 22
    stmt                           shift and go to state 23
    empty                          shift and go to state 26

state 52

    (13) flow_stmt -> IF LPAREN ID GTR NUM RPAREN LCB . stmt_list return_stmt RCB
    (3) stmt_list -> . flow_stmt
    (4) stmt_list -> . stmt
    (5) stmt_list -> . stmt stmt_list
    (12) flow_stmt -> . IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB
    (13) flow_stmt -> . IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB
    (6) stmt -> . LPAREN expr RPAREN
    (7) stmt -> . empty
    (8) stmt -> . ID ASSIGN NUM SEMI
    (9) stmt -> . INT ID SEMI
    (10) stmt -> . INT ID ASSIGN expr SEMI
    (11) empty -> .
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
    IF              shift and go to state 24
    LPAREN          shift and go to state 20
    ID              shift and go to state 25
    INT             shift and go to state 19
    RETURN          reduce using rule 11 (empty -> .)

    stmt_list                      shift and go to state 54
    flow_stmt                      shift and go to state 22
    stmt                           shift and go to state 23
    empty                          shift and go to state 26

state 53

    (12) flow_stmt -> IF LPAREN ID LTR NUM RPAREN LCB stmt_list . return_stmt RCB
    (14) return_stmt -> . RETURN factor SEMI
    RETURN          shift and go to state 30

    return_stmt                    shift and go to state 55

state 54

    (13) flow_stmt -> IF LPAREN ID GTR NUM RPAREN LCB stmt_list . return_stmt RCB
    (14) return_stmt -> . RETURN factor SEMI
    RETURN          shift and go to state 30

    return_stmt                    shift and go to state 56

state 55

    (12) flow_stmt -> IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt . RCB
    RCB             shift and go to state 57


state 56

    (13) flow_stmt -> IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt . RCB
    RCB             shift and go to state 58


state 57

    (12) flow_stmt -> IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB .
    RETURN          reduce using rule 12 (flow_stmt -> IF LPAREN ID LTR NUM RPAREN LCB stmt_list return_stmt RCB .)


state 58

    (13) flow_stmt -> IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB .
    RETURN          reduce using rule 13 (flow_stmt -> IF LPAREN ID GTR NUM RPAREN LCB stmt_list return_stmt RCB .)


Conflicts:

shift/reduce conflict for IF in state 18 resolved as shift
shift/reduce conflict for LPAREN in state 18 resolved as shift
shift/reduce conflict for ID in state 18 resolved as shift
shift/reduce conflict for INT in state 18 resolved as shift
shift/reduce conflict for IF in state 23 resolved as shift
shift/reduce conflict for LPAREN in state 23 resolved as shift
shift/reduce conflict for ID in state 23 resolved as shift
shift/reduce conflict for INT in state 23 resolved as shift
shift/reduce conflict for IF in state 51 resolved as shift
shift/reduce conflict for LPAREN in state 51 resolved as shift
shift/reduce conflict for ID in state 51 resolved as shift
shift/reduce conflict for INT in state 51 resolved as shift
shift/reduce conflict for IF in state 52 resolved as shift
shift/reduce conflict for LPAREN in state 52 resolved as shift
shift/reduce conflict for ID in state 52 resolved as shift
shift/reduce conflict for INT in state 52 resolved as shift
reduce/reduce conflict in state 23 resolved using rule stmt_list -> stmt
rejected rule (empty -> <empty>) in state 23